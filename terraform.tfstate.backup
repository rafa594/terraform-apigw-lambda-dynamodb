{
  "version": 4,
  "terraform_version": "0.12.24",
  "serial": 94,
  "lineage": "83a8f9c6-342f-ac81-257b-2db63897beed",
  "outputs": {},
  "resources": [
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "archive_file",
      "name": "actualizar",
      "provider": "provider.archive",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "excludes": null,
            "id": "af58f054b7ae6006d941002086db6e2f20dc0107",
            "output_base64sha256": "UR48ZtcvetbYjKozOWToueUm06v9oQmY8nnYWdp5pSg=",
            "output_md5": "31eab3411ad0ae93f3a49212950238e2",
            "output_path": "modules/services/lambda/actualizar-pais.zip",
            "output_sha": "af58f054b7ae6006d941002086db6e2f20dc0107",
            "output_size": 667,
            "source": [
              {
                "content": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    \n    pais = event['pais']\n    capital = event['capital']\n    try:\n        response = table.put_item(\n            Item={\n                'pais': pais,\n                'capital': capital\n            }\n        )\n        return \"Elemento \" + pais + \" ingresado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en el ingreso del elemento \" + pais    \n\n\n",
                "filename": "lambda_function.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          }
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "archive_file",
      "name": "consultar",
      "provider": "provider.archive",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "excludes": null,
            "id": "e3c5a03b484270b7010f3654f190aa94cbaf5adf",
            "output_base64sha256": "G/9Z7HV+PNcmjETKtNfvT5mfkP+qkprsOy3EOX2PWxM=",
            "output_md5": "adb90b6ca25f5af3ebd0fe5085a46f0b",
            "output_path": "modules/services/lambda/consultar-pais.zip",
            "output_sha": "e3c5a03b484270b7010f3654f190aa94cbaf5adf",
            "output_size": 669,
            "source": [
              {
                "content": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    pais = event['pais']\n    try:\n        response = table.query(\n            KeyConditionExpression=Key('pais').eq(pais)\n        )\n        return \"La capital de \" + response[\"Items\"][0]['pais'] +\" es: \" + response[\"Items\"][0]['capital'] \n    except:\n        return \"No existe ningun elemento relacionado con \" + pais\n    \n",
                "filename": "lambda_function.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          }
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "archive_file",
      "name": "crear",
      "provider": "provider.archive",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "excludes": null,
            "id": "af58f054b7ae6006d941002086db6e2f20dc0107",
            "output_base64sha256": "UR48ZtcvetbYjKozOWToueUm06v9oQmY8nnYWdp5pSg=",
            "output_md5": "31eab3411ad0ae93f3a49212950238e2",
            "output_path": "modules/services/lambda/registrar-pais.zip",
            "output_sha": "af58f054b7ae6006d941002086db6e2f20dc0107",
            "output_size": 667,
            "source": [
              {
                "content": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    \n    pais = event['pais']\n    capital = event['capital']\n    try:\n        response = table.put_item(\n            Item={\n                'pais': pais,\n                'capital': capital\n            }\n        )\n        return \"Elemento \" + pais + \" ingresado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en el ingreso del elemento \" + pais    \n\n\n",
                "filename": "lambda_function.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          }
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "archive_file",
      "name": "eliminar",
      "provider": "provider.archive",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "excludes": null,
            "id": "dcbae6a77ef0504d5668e9b85d33bb4600154e59",
            "output_base64sha256": "bzTr+X+wgAKjwn03NVPl7Pj4eGVbME9Y7Lrg5/jaUDY=",
            "output_md5": "05462dc9fb657858e33b4f0511982318",
            "output_path": "modules/services/lambda/eliminar-pais.zip",
            "output_sha": "dcbae6a77ef0504d5668e9b85d33bb4600154e59",
            "output_size": 654,
            "source": [
              {
                "content": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    \n    pais = event['pais']    \n    try:\n        response = table.delete_item(\n            Key={\n                'pais': pais                \n            }\n        )\n        return \"Elemento \" + pais + \" eliminado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en la eliminacion del elemento \" + pais    \n\n\n",
                "filename": "lambda_function.py"
              }
            ],
            "source_content": null,
            "source_content_filename": null,
            "source_dir": null,
            "source_file": null,
            "type": "zip"
          }
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "template_file",
      "name": "actualizar",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "191fb8bdbd1df410b1ed21fd84d136060fe48ad743bcb455050a55ecf2a0b2cc",
            "rendered": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    \n    pais = event['pais']\n    capital = event['capital']\n    try:\n        response = table.update_item(\n            Key={\n                'pais': pais\n                \n            },\n            UpdateExpression=\"set capital = :c\",\n            ExpressionAttributeValues={                \n                ':c': capital\n            },\n            ReturnValues=\"UPDATED_NEW\"\n        )\n        return \"Elemento \" + pais + \" actualizado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en la actualizacion del elemento \" + pais    \n\n\n",
            "template": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='${aws_region}', endpoint_url='https://dynamodb.${aws_region}.amazonaws.com')\n\n    table = dynamodb.Table('${dynamodb-table-name}')\n    \n    pais = event['pais']\n    capital = event['capital']\n    try:\n        response = table.update_item(\n            Key={\n                'pais': pais\n                \n            },\n            UpdateExpression=\"set capital = :c\",\n            ExpressionAttributeValues={                \n                ':c': capital\n            },\n            ReturnValues=\"UPDATED_NEW\"\n        )\n        return \"Elemento \" + pais + \" actualizado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en la actualizacion del elemento \" + pais    \n\n\n",
            "vars": {
              "aws_region": "us-west-2",
              "dynamodb-table-name": "rafa-paises"
            }
          }
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "template_file",
      "name": "consultar",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "b438633c742184690ef629864d19181f4e14a988042c9856adb16a3f4906733e",
            "rendered": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    pais = event['pais']\n    try:\n        response = table.query(\n            KeyConditionExpression=Key('pais').eq(pais)\n        )\n        return \"La capital de \" + response[\"Items\"][0]['pais'] +\" es: \" + response[\"Items\"][0]['capital'] \n    except:\n        return \"No existe ningun elemento relacionado con \" + pais\n    \n",
            "template": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='${aws_region}', endpoint_url='https://dynamodb.${aws_region}.amazonaws.com')\n\n    table = dynamodb.Table('${dynamodb-table-name}')\n    pais = event['pais']\n    try:\n        response = table.query(\n            KeyConditionExpression=Key('pais').eq(pais)\n        )\n        return \"La capital de \" + response[\"Items\"][0]['pais'] +\" es: \" + response[\"Items\"][0]['capital'] \n    except:\n        return \"No existe ningun elemento relacionado con \" + pais\n    \n",
            "vars": {
              "aws_region": "us-west-2",
              "dynamodb-table-name": "rafa-paises"
            }
          }
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "template_file",
      "name": "crear",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "adf8a9811d2cee198f837cac261380f258cadab0ae7c24157b0cb3bb4366b8d9",
            "rendered": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    \n    pais = event['pais']\n    capital = event['capital']\n    try:\n        response = table.put_item(\n            Item={\n                'pais': pais,\n                'capital': capital\n            }\n        )\n        return \"Elemento \" + pais + \" ingresado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en el ingreso del elemento \" + pais    \n\n\n",
            "template": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='${aws_region}', endpoint_url='https://dynamodb.${aws_region}.amazonaws.com')\n\n    table = dynamodb.Table('${dynamodb-table-name}')\n    \n    pais = event['pais']\n    capital = event['capital']\n    try:\n        response = table.put_item(\n            Item={\n                'pais': pais,\n                'capital': capital\n            }\n        )\n        return \"Elemento \" + pais + \" ingresado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en el ingreso del elemento \" + pais    \n\n\n",
            "vars": {
              "aws_region": "us-west-2",
              "dynamodb-table-name": "rafa-paises"
            }
          }
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "data",
      "type": "template_file",
      "name": "eliminar",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "857ddf12efa89d4d928cb07ae55276c1cda06ae217ba8ee51e9690adbae6a2c4",
            "rendered": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='us-west-2', endpoint_url='https://dynamodb.us-west-2.amazonaws.com')\n\n    table = dynamodb.Table('rafa-paises')\n    \n    pais = event['pais']    \n    try:\n        response = table.delete_item(\n            Key={\n                'pais': pais                \n            }\n        )\n        return \"Elemento \" + pais + \" eliminado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en la eliminacion del elemento \" + pais    \n\n\n",
            "template": "from __future__ import print_function # Python 2/3 compatibility\nimport boto3\nimport json\nimport decimal\nfrom boto3.dynamodb.conditions import Key, Attr\n\n# Helper class to convert a DynamoDB item to JSON.\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, decimal.Decimal):\n            if o % 1 \u003e 0:\n                return float(o)\n            else:\n                return int(o)\n        return super(DecimalEncoder, self).default(o)\n\ndef lambda_handler(event, context):\n\n    dynamodb = boto3.resource('dynamodb', region_name='${aws_region}', endpoint_url='https://dynamodb.${aws_region}.amazonaws.com')\n\n    table = dynamodb.Table('${dynamodb-table-name}')\n    \n    pais = event['pais']    \n    try:\n        response = table.delete_item(\n            Key={\n                'pais': pais                \n            }\n        )\n        return \"Elemento \" + pais + \" eliminado correctamente.\"\n    except:\n        return \"Ha ocurrido un error en la eliminacion del elemento \" + pais    \n\n\n",
            "vars": {
              "aws_region": "us-west-2",
              "dynamodb-table-name": "rafa-paises"
            }
          }
        }
      ]
    },
    {
      "module": "module.dynamodb",
      "mode": "managed",
      "type": "aws_dynamodb_table",
      "name": "table",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:dynamodb:us-west-2:492266378106:table/rafa-paises",
            "attribute": [
              {
                "name": "capital",
                "type": "S"
              },
              {
                "name": "pais",
                "type": "S"
              }
            ],
            "billing_mode": "PROVISIONED",
            "global_secondary_index": [],
            "hash_key": "pais",
            "id": "rafa-paises",
            "local_secondary_index": [],
            "name": "rafa-paises",
            "point_in_time_recovery": [
              {
                "enabled": false
              }
            ],
            "range_key": "capital",
            "read_capacity": 20,
            "server_side_encryption": [],
            "stream_arn": "",
            "stream_enabled": false,
            "stream_label": "",
            "stream_view_type": "",
            "tags": {
              "Environment": "production",
              "Name": "rafa-paises"
            },
            "timeouts": null,
            "ttl": [
              {
                "attribute_name": "",
                "enabled": false
              }
            ],
            "write_capacity": 20
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjM2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.iam",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "lambda-role",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::492266378106:role/lambda-rafa-Role",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2020-04-07T03:20:49Z",
            "description": "",
            "force_detach_policies": false,
            "id": "lambda-rafa-Role",
            "max_session_duration": 3600,
            "name": "lambda-rafa-Role",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": null,
            "unique_id": "AROAXFHK42N5NIGPUHLJG"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.iam",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "DynamoDB-Policy",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "lambda-rafa-Role:lambda-rafa-Role-Policy",
            "name": "lambda-rafa-Role-Policy",
            "name_prefix": null,
            "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [        \n        {\n            \"Sid\": \"SpecificTable\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:BatchGet*\",\n                \"dynamodb:DescribeStream\",\n                \"dynamodb:DescribeTable\",\n                \"dynamodb:Get*\",\n                \"dynamodb:Query\",\n                \"dynamodb:Scan\",\n                \"dynamodb:BatchWrite*\",\n                \"dynamodb:CreateTable\",\n                \"dynamodb:Delete*\",\n                \"dynamodb:Update*\",\n                \"dynamodb:PutItem\",\n                \"dynamodb:ListStreams\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}",
            "role": "lambda-rafa-Role"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.iam.aws_iam_role.lambda-role"
          ]
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "actualizar",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-west-2:492266378106:function:actualizar-pais",
            "dead_letter_config": [],
            "description": "",
            "environment": [],
            "filename": "modules/services/lambda/actualizar-pais.zip",
            "function_name": "actualizar-pais",
            "handler": "lambda_function.lambda_handler",
            "id": "actualizar-pais",
            "invoke_arn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:492266378106:function:actualizar-pais/invocations",
            "kms_key_arn": "",
            "last_modified": "2020-04-07T03:21:18.219+0000",
            "layers": null,
            "memory_size": 128,
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-west-2:492266378106:function:actualizar-pais:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::492266378106:role/lambda-rafa-Role",
            "runtime": "python2.7",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "source_code_hash": "UR48ZtcvetbYjKozOWToueUm06v9oQmY8nnYWdp5pSg=",
            "source_code_size": 667,
            "tags": null,
            "timeout": 3,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.iam.aws_iam_role.lambda-role"
          ]
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "consultar",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-west-2:492266378106:function:consultar-pais",
            "dead_letter_config": [],
            "description": "",
            "environment": [],
            "filename": "modules/services/lambda/consultar-pais.zip",
            "function_name": "consultar-pais",
            "handler": "lambda_function.lambda_handler",
            "id": "consultar-pais",
            "invoke_arn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:492266378106:function:consultar-pais/invocations",
            "kms_key_arn": "",
            "last_modified": "2020-04-07T03:21:01.628+0000",
            "layers": null,
            "memory_size": 128,
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-west-2:492266378106:function:consultar-pais:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::492266378106:role/lambda-rafa-Role",
            "runtime": "python2.7",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "source_code_hash": "G/9Z7HV+PNcmjETKtNfvT5mfkP+qkprsOy3EOX2PWxM=",
            "source_code_size": 669,
            "tags": null,
            "timeout": 3,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.iam.aws_iam_role.lambda-role"
          ]
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "crear",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-west-2:492266378106:function:registrar-pais",
            "dead_letter_config": [],
            "description": "",
            "environment": [],
            "filename": "modules/services/lambda/registrar-pais.zip",
            "function_name": "registrar-pais",
            "handler": "lambda_function.lambda_handler",
            "id": "registrar-pais",
            "invoke_arn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:492266378106:function:registrar-pais/invocations",
            "kms_key_arn": "",
            "last_modified": "2020-04-07T03:21:09.821+0000",
            "layers": null,
            "memory_size": 128,
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-west-2:492266378106:function:registrar-pais:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::492266378106:role/lambda-rafa-Role",
            "runtime": "python2.7",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "source_code_hash": "UR48ZtcvetbYjKozOWToueUm06v9oQmY8nnYWdp5pSg=",
            "source_code_size": 667,
            "tags": null,
            "timeout": 3,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.iam.aws_iam_role.lambda-role"
          ]
        }
      ]
    },
    {
      "module": "module.lambda",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "eliminar",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:lambda:us-west-2:492266378106:function:eliminar-pais",
            "dead_letter_config": [],
            "description": "",
            "environment": [],
            "filename": "modules/services/lambda/eliminar-pais.zip",
            "function_name": "eliminar-pais",
            "handler": "lambda_function.lambda_handler",
            "id": "eliminar-pais",
            "invoke_arn": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:492266378106:function:eliminar-pais/invocations",
            "kms_key_arn": "",
            "last_modified": "2020-04-07T03:21:26.120+0000",
            "layers": null,
            "memory_size": 128,
            "publish": false,
            "qualified_arn": "arn:aws:lambda:us-west-2:492266378106:function:eliminar-pais:$LATEST",
            "reserved_concurrent_executions": -1,
            "role": "arn:aws:iam::492266378106:role/lambda-rafa-Role",
            "runtime": "python2.7",
            "s3_bucket": null,
            "s3_key": null,
            "s3_object_version": null,
            "source_code_hash": "bzTr+X+wgAKjwn03NVPl7Pj4eGVbME9Y7Lrg5/jaUDY=",
            "source_code_size": 654,
            "tags": null,
            "timeout": 3,
            "timeouts": null,
            "tracing_config": [
              {
                "mode": "PassThrough"
              }
            ],
            "version": "$LATEST",
            "vpc_config": []
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.iam.aws_iam_role.lambda-role"
          ]
        }
      ]
    }
  ]
}
